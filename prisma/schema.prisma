// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(uuid())
  email        String  @unique
  name         String
  password     String
  avatar       String
  role         String  @default("user")
  city         String?
  state        String?
  phone        String?
  type_login   String? // ex: "google", "facebook", "email"
  first_access Boolean @default(true)
  verify_email Boolean @default(false)
  verify_token String? // token para verificação de email

  // relações
  answers UserAnswer[]
  moods   MoodRecord[]

  // opcional: controle de progresso
  currentBlock           Int?
  questionnaireCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Questionnaire {
  id          String   @id @default(uuid())
  title       String
  description String?
  terms       String? // termos e condições
  blocks      Block[]
  createdAt   DateTime @default(now())

  @@map("questionnaire")
}

model Block {
  id              String        @id @default(uuid())
  questionnaireId String
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id])
  order           Int // 1,2,3... => ordenação do bloco
  title           String
  description     String?
  bonus           String? // ex: "documentário", "ebook", "curso"
  questions       Question[]

  @@map("block")
}

model Question {
  id       String       @id @default(uuid())
  blockId  String
  block    Block        @relation(fields: [blockId], references: [id])
  // questionOrder Int?   // opcional agora
  order    Int? // 1,2,3... => ordenação da questão dentro do bloco
  type     String // "multiple_choice" | "text" | etc
  question String
  options  Json? // opções se múltipla escolha
  answers  UserAnswer[]

  @@map("question")
}

model UserAnswer {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  answer     Json
  createdAt  DateTime @default(now())

  @@map("user_answer")
}

model MoodRecord {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Scores diários
  score_mood    Int // 1-5, humor geral
  score_anxiety Int // 1-5, ansiedade
  score_energy  Int // 1-5, energia/disposição
  score_sleep   Int // 1-5, qualidade do sono
  score_stress  Int // 1-5, estresse

  // Campo opcional de texto para contexto emocional
  notes String?

  // Preparado para voz no futuro
  // voiceUsed  Boolean  @default(false)
  // audioPath  String?  // URL ou caminho do arquivo de áudio

  // Insight gerado pela IA (texto)
  ai_insight  String?
  ai_features Json? // dados adicionais da análise da IA

  // Garantir 1 registro por dia por usuário
  date DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date])
  @@map("mood_record")
}
