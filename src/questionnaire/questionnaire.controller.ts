import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  Query,
  HttpCode,
  HttpStatus,
} from '@nestjs/common';
import { QuestionnaireService } from './questionnaire.service';
import { CreateQuestionnaireDto } from './dto/create-questionnaire.dto';
import { UpdateQuestionnaireDto } from './dto/update-questionnaire.dto';
import { CreateBlockResponseDto } from './dto/create-response.dto';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiQuery,
  ApiBearerAuth,
  ApiProperty,
} from '@nestjs/swagger';

class QuestionnaireResponseDto {
  @ApiProperty({
    description: 'ID √∫nico do question√°rio',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  id: string;

  @ApiProperty({
    description: 'T√≠tulo do question√°rio',
    example: 'Question√°rio de Bem-estar Mental',
  })
  title: string;

  @ApiProperty({
    description: 'Descri√ß√£o detalhada do question√°rio',
    example:
      'Question√°rio para avaliar o estado de bem-estar mental do usu√°rio',
    required: false,
  })
  description?: string;

  @ApiProperty({
    description: 'Data de cria√ß√£o',
    example: '2023-09-23T10:30:00Z',
  })
  createdAt: Date;

  @ApiProperty({
    description: 'Data da √∫ltima atualiza√ß√£o',
    example: '2023-09-23T10:30:00Z',
  })
  updatedAt: Date;
}

class QuestionDto {
  @ApiProperty({
    description: 'ID √∫nico da quest√£o',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  id: string;

  @ApiProperty({
    description: 'Texto da quest√£o',
    example: 'Como voc√™ se sente hoje?',
  })
  text: string;

  @ApiProperty({
    description: 'Tipo da quest√£o',
    example: 'multiple_choice',
    enum: ['multiple_choice', 'text', 'scale', 'boolean'],
  })
  type: string;

  @ApiProperty({
    description: 'Op√ß√µes de resposta (para quest√µes de m√∫ltipla escolha)',
    example: ['Muito bem', 'Bem', 'Regular', 'Mal', 'Muito mal'],
    required: false,
  })
  options?: string[];
}

class ResponseDto {
  @ApiProperty({
    description: 'ID √∫nico da resposta',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  id: string;

  @ApiProperty({
    description: 'ID do usu√°rio que respondeu',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  userId: string;

  @ApiProperty({
    description: 'ID da quest√£o respondida',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  questionId: string;

  @ApiProperty({
    description: 'Valor da resposta',
    example: 'Muito bem',
  })
  value: string;

  @ApiProperty({
    description: 'Data da resposta',
    example: '2023-09-23T10:30:00Z',
  })
  createdAt: Date;
}

@ApiTags('üìù Questionnaires')
@Controller('questionnaire')
export class QuestionnaireController {
  constructor(private readonly questionnaireService: QuestionnaireService) {}

  @ApiOperation({
    summary: 'üÜï Criar Question√°rio',
    description: `
### Novo Question√°rio

Cria um novo question√°rio no sistema.

**Requer:** Token JWT v√°lido
    `,
  })
  @ApiBearerAuth('bearer')
  @ApiResponse({
    status: 201,
    description: '‚úÖ Question√°rio criado com sucesso',
    type: QuestionnaireResponseDto,
  })
  @ApiResponse({
    status: 400,
    description: 'Dados inv√°lidos fornecidos',
  })
  @Post()
  create(@Body() createQuestionnaireDto: CreateQuestionnaireDto) {
    return this.questionnaireService.create(createQuestionnaireDto);
  }

  @ApiOperation({
    summary: 'üìã Listar Question√°rios',
    description: `
### Todos os Question√°rios

Retorna question√°rios dispon√≠veis, com filtro opcional por usu√°rio.

**Requer:** Token JWT v√°lido
    `,
  })
  @ApiBearerAuth('bearer')
  @ApiQuery({
    name: 'userId',
    description: 'ID do usu√°rio para filtrar question√°rios',
    required: false,
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiResponse({
    status: 200,
    description: '‚úÖ Lista de question√°rios retornada com sucesso',
    type: [QuestionnaireResponseDto],
  })
  @Get()
  @HttpCode(HttpStatus.OK)
  findAll(@Query() query: { userId?: string }) {
    return this.questionnaireService.findAll(query.userId);
  }

  @ApiOperation({
    summary: 'üß© Quest√µes por Bloco',
    description: `
### Obter Quest√µes de um Bloco

Retorna todas as quest√µes de um bloco espec√≠fico.

**Requer:** Token JWT v√°lido
    `,
  })
  @ApiBearerAuth('bearer')
  @ApiParam({
    name: 'id',
    description: 'ID do bloco de quest√µes',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiResponse({
    status: 200,
    description: 'Quest√µes do bloco retornadas com sucesso',
    type: [QuestionDto],
  })
  @ApiResponse({
    status: 404,
    description: 'Bloco n√£o encontrado',
  })
  @Get('/blocks/:id')
  @HttpCode(HttpStatus.OK)
  getQuestionsByBlock(@Param('id') blockId: string) {
    return this.questionnaireService.getQuestionsByBlock(blockId);
  }

  @ApiOperation({
    summary: 'üîç Obter Question√°rio por ID',
    description: `
### Question√°rio Espec√≠fico

Retorna detalhes de um question√°rio pelo seu ID.

**Requer:** Token JWT v√°lido
    `,
  })
  @ApiBearerAuth('bearer')
  @ApiParam({
    name: 'id',
    description: 'ID do question√°rio',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiResponse({
    status: 200,
    description: '‚úÖ Question√°rio encontrado com sucesso',
    type: QuestionnaireResponseDto,
  })
  @ApiResponse({
    status: 404,
    description: '‚ùå Question√°rio n√£o encontrado',
  })
  @Get(':id')
  findOne(@Param('id') id: string) {
    return this.questionnaireService.findOne(id);
  }

  @ApiOperation({
    summary: '‚úèÔ∏è Atualizar Question√°rio',
    description: `
### Modificar Question√°rio

Atualiza informa√ß√µes de um question√°rio existente.

**Requer:** Token JWT v√°lido
    `,
  })
  @ApiBearerAuth('bearer')
  @ApiParam({
    name: 'id',
    description: 'ID do question√°rio a ser atualizado',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiResponse({
    status: 200,
    description: 'Question√°rio atualizado com sucesso',
    type: QuestionnaireResponseDto,
  })
  @ApiResponse({
    status: 404,
    description: 'Question√°rio n√£o encontrado',
  })
  @Patch(':id')
  update(
    @Param('id') id: string,
    @Body() updateQuestionnaireDto: UpdateQuestionnaireDto,
  ) {
    return this.questionnaireService.update(id, updateQuestionnaireDto);
  }

  @ApiOperation({
    summary: 'Remover question√°rio',
    description: 'Remove um question√°rio do sistema',
  })
  @ApiBearerAuth('bearer')
  @ApiParam({
    name: 'id',
    description: 'ID do question√°rio a ser removido',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiResponse({
    status: 200,
    description: 'Question√°rio removido com sucesso',
  })
  @ApiResponse({
    status: 404,
    description: 'Question√°rio n√£o encontrado',
  })
  @Delete(':id')
  remove(@Param('id') id: string) {
    return this.questionnaireService.remove(id);
  }

  @ApiOperation({
    summary: 'üíæ Salvar Respostas',
    description: `
### Enviar Respostas do Bloco

Salva todas as respostas de um bloco de quest√µes.

**Requer:** Token JWT v√°lido
    `,
  })
  @ApiBearerAuth('bearer')
  @ApiResponse({
    status: 201,
    description: '‚úÖ Respostas salvas com sucesso',
    schema: {
      type: 'object',
      properties: {
        message: { type: 'string', example: 'Responses saved successfully' },
        count: { type: 'number', example: 5 },
      },
    },
  })
  @ApiResponse({
    status: 400,
    description: 'Dados de resposta inv√°lidos',
  })
  @Post('responses')
  @HttpCode(HttpStatus.CREATED)
  saveResponses(@Body() responseDto: CreateBlockResponseDto) {
    return this.questionnaireService.saveBlockResponses(responseDto);
  }

  @ApiOperation({
    summary: 'üìÑ Obter Respostas do Usu√°rio',
    description: `
### Hist√≥rico de Respostas

Retorna todas as respostas de um usu√°rio para um bloco espec√≠fico.

**Requer:** Token JWT v√°lido
    `,
  })
  @ApiBearerAuth('bearer')
  @ApiParam({
    name: 'userId',
    description: 'ID do usu√°rio',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiParam({
    name: 'blockId',
    description: 'ID do bloco de quest√µes',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiResponse({
    status: 200,
    description: 'Respostas do usu√°rio retornadas com sucesso',
    type: [ResponseDto],
  })
  @ApiResponse({
    status: 404,
    description: 'Usu√°rio ou bloco n√£o encontrado',
  })
  @Get('responses/:userId/:blockId')
  @HttpCode(HttpStatus.OK)
  getUserResponses(
    @Param('userId') userId: string,
    @Param('blockId') blockId: string,
  ) {
    return this.questionnaireService.getUserResponses(userId, blockId);
  }
}
