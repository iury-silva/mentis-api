import { Controller, Get, Post, Body, Param, Delete } from '@nestjs/common';
import { UsersService } from './users.service';
import { CreateUserDto } from './dto/create-user.dto';
import { IsPublic } from 'src/auth/decorators/is-public.decorator';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiParam,
  ApiBearerAuth,
  ApiProperty,
} from '@nestjs/swagger';

class UserResponseDto {
  @ApiProperty({
    description: 'ID √∫nico do usu√°rio',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  id: string;

  @ApiProperty({
    description: 'Nome completo do usu√°rio',
    example: 'Jo√£o Silva',
  })
  name: string;

  @ApiProperty({
    description: 'Email do usu√°rio',
    example: 'usuario@exemplo.com',
  })
  email: string;

  @ApiProperty({
    description: 'Role do usu√°rio no sistema',
    example: 'user',
    enum: ['user', 'admin'],
  })
  role: string;

  @ApiProperty({
    description: 'URL do avatar do usu√°rio',
    example: 'https://exemplo.com/avatar.jpg',
    required: false,
  })
  avatar?: string;

  @ApiProperty({
    description: 'Data de cria√ß√£o do usu√°rio',
    example: '2023-09-23T10:30:00Z',
  })
  createdAt: Date;

  @ApiProperty({
    description: 'Data da √∫ltima atualiza√ß√£o',
    example: '2023-09-23T10:30:00Z',
  })
  updatedAt: Date;
}

@ApiTags('üë• Users')
@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @ApiOperation({
    summary: 'üÜï Criar Novo Usu√°rio',
    description: `
### Registro de Usu√°rio

Cria uma nova conta de usu√°rio no sistema.

**Status:** P√∫blico (n√£o requer autentica√ß√£o)

#### Valida√ß√µes:
- ‚úÖ Email v√°lido e √∫nico
- ‚úÖ Senha forte (m√≠n. 6 chars, 1 mai√∫scula, 1 min√∫scula, 1 n√∫mero)
- ‚úÖ Nome com pelo menos 2 caracteres
    `,
  })
  @ApiResponse({
    status: 201,
    description: 'Usu√°rio criado com sucesso',
    type: UserResponseDto,
  })
  @ApiResponse({
    status: 400,
    description: 'Dados inv√°lidos fornecidos',
    example: {
      statusCode: 400,
      message: ['email must be a valid email', 'password is too weak'],
      error: true,
    },
  })
  @ApiResponse({
    status: 409,
    description: 'Email j√° est√° em uso',
    example: {
      statusCode: 409,
      message: 'Email already exists',
      error: true,
    },
  })
  @IsPublic()
  @Post()
  create(@Body() createUserDto: CreateUserDto) {
    return this.usersService.create(createUserDto);
  }

  @ApiOperation({
    summary: 'üìã Listar Todos os Usu√°rios',
    description: `
### Lista Completa de Usu√°rios

Retorna todos os usu√°rios cadastrados no sistema.

**Requer:** Token JWT v√°lido
    `,
  })
  @ApiBearerAuth('bearer')
  @ApiResponse({
    status: 200,
    description: '‚úÖ Lista de usu√°rios retornada com sucesso',
    type: [UserResponseDto],
  })
  @ApiResponse({
    status: 401,
    description: '‚ùå Token de acesso inv√°lido ou n√£o fornecido',
    schema: {
      type: 'object',
      properties: {
        statusCode: { type: 'number', example: 401 },
        message: { type: 'string', example: 'Unauthorized' },
        error: { type: 'boolean', example: true },
      },
    },
  })
  @Get()
  findAll() {
    return this.usersService.findAll();
  }

  @ApiOperation({
    summary: 'üóëÔ∏è Remover Usu√°rio',
    description: `
### Exclus√£o de Usu√°rio

Remove um usu√°rio espec√≠fico do sistema.

**Requer:** Token JWT v√°lido
**Aten√ß√£o:** A√ß√£o irrevers√≠vel!
    `,
  })
  @ApiBearerAuth('bearer')
  @ApiParam({
    name: 'id',
    description: 'ID √∫nico do usu√°rio a ser removido',
    example: '123e4567-e89b-12d3-a456-426614174000',
  })
  @ApiResponse({
    status: 200,
    description: 'Usu√°rio removido com sucesso',
    example: {
      message: 'User deleted successfully',
      id: '123e4567-e89b-12d3-a456-426614174000',
    },
  })
  @ApiResponse({
    status: 404,
    description: 'Usu√°rio n√£o encontrado',
    example: {
      statusCode: 404,
      message: 'User not found',
      error: true,
    },
  })
  @Delete(':id')
  remove(@Param('id') id: string) {
    return this.usersService.remove(id);
  }
}
